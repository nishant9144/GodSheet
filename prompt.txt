I have created the code for parsing the formula. But I want some update in the code. Currently the cell references are stored as per the type for formula. 
Like if the formula is arithmetic, then it is stored in operand in the respective type of formula and if the formula is a function, then the cell references is
stored in the range. But I want that the cell references are updated in the cell dependents and cell dependencies when the formula is function or arithmetic with
cell references. I have created set data structure using AVL tree. I want the dependencies field to be a set so as to efficiently update the cell when recalculation
is needed. I want to update the code wherever needed.

This is the implementation of Cell in my code.
```
typedef enum
{
    TYPE_EMPTY,
    TYPE_CONSTANT,
    TYPE_REFERENCE,  // References another cell (e.g., =A1)
    TYPE_ARITHMETIC, // Simple arithmetic (e.g., =A1+1)
    TYPE_FUNCTION,   // Functions like MIN, MAX, etc.
} CellType;
typedef enum
{
    OP_NONE,
    OP_ADD,
    OP_SUB,
    OP_MUL,
    OP_DIV
} Operation;

typedef struct Cell Cell;
typedef struct
{
    AVLNode *root;
} CellSet;

struct Cell
{
    int value;
    char *formula;
    CellType type;

    union
    {
        struct
        {
            Operation op;
            Cell *operand1;
            Cell *operand2;
            int constant;
        } arithmetic;

        struct
        {
            char *func_name;
            Cell **range;
            int range_size;
        } function;
    } op_data;

    // Dependency management
    CellSet *dependents;
    CellSet *dependencies;

    // For error handling
    bool has_error;
    char *error_msg;

    // For topological sort
    bool visited;   // For cycle detection
    bool in_stack;  // For cycle detection
    int topo_order; // Topological order
};
```